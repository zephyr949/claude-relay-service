const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');
const compression = require('compression');
const path = require('path');
const fs = require('fs');
const bcrypt = require('bcryptjs');

const config = require('../config/config');
const logger = require('./utils/logger');
const redis = require('./models/redis');
const pricingService = require('./services/pricingService');

// Import routes
const apiRoutes = require('./routes/api');
const adminRoutes = require('./routes/admin');
const webRoutes = require('./routes/web');
const apiStatsRoutes = require('./routes/apiStats');
const geminiRoutes = require('./routes/geminiRoutes');
const openaiGeminiRoutes = require('./routes/openaiGeminiRoutes');
const openaiClaudeRoutes = require('./routes/openaiClaudeRoutes');

// Import middleware
const { 
  corsMiddleware, 
  requestLogger, 
  securityMiddleware, 
  errorHandler,
  globalRateLimit,
  requestSizeLimit
} = require('./middleware/auth');

class Application {
  constructor() {
    this.app = express();
    this.server = null;
  }

  async initialize() {
    try {
      // üîó ËøûÊé•Redis
      logger.info('üîÑ Connecting to Redis...');
      await redis.connect();
      logger.success('‚úÖ Redis connected successfully');
      
      // üí∞ ÂàùÂßãÂåñ‰ª∑Ê†ºÊúçÂä°
      logger.info('üîÑ Initializing pricing service...');
      await pricingService.initialize();
      
      // üîß ÂàùÂßãÂåñÁÆ°ÁêÜÂëòÂá≠ÊçÆ
      logger.info('üîÑ Initializing admin credentials...');
      await this.initializeAdmin();
      
      // üí∞ ÂàùÂßãÂåñË¥πÁî®Êï∞ÊçÆ
      logger.info('üí∞ Checking cost data initialization...');
      const costInitService = require('./services/costInitService');
      const needsInit = await costInitService.needsInitialization();
      if (needsInit) {
        logger.info('üí∞ Initializing cost data for all API Keys...');
        const result = await costInitService.initializeAllCosts();
        logger.info(`üí∞ Cost initialization completed: ${result.processed} processed, ${result.errors} errors`);
      }
      
      // üïê ÂàùÂßãÂåñClaudeË¥¶Êà∑‰ºöËØùÁ™óÂè£
      logger.info('üïê Initializing Claude account session windows...');
      const claudeAccountService = require('./services/claudeAccountService');
      await claudeAccountService.initializeSessionWindows();
      
      // üõ°Ô∏è ÂÆâÂÖ®‰∏≠Èó¥‰ª∂
      this.app.use(helmet({
        contentSecurityPolicy: false, // ÂÖÅËÆ∏ÂÜÖËÅîÊ†∑ÂºèÂíåËÑöÊú¨
        crossOriginEmbedderPolicy: false
      }));
      
      // üåê CORS
      if (config.web.enableCors) {
        this.app.use(cors());
      } else {
        this.app.use(corsMiddleware);
      }
      
      // üì¶ ÂéãÁº© - ÊéíÈô§ÊµÅÂºèÂìçÂ∫îÔºàSSEÔºâ
      this.app.use(compression({
        filter: (req, res) => {
          // ‰∏çÂéãÁº© Server-Sent Events
          if (res.getHeader('Content-Type') === 'text/event-stream') {
            return false;
          }
          // ‰ΩøÁî®ÈªòËÆ§ÁöÑÂéãÁº©Âà§Êñ≠
          return compression.filter(req, res);
        }
      }));
      
      // üö¶ ÂÖ®Â±ÄÈÄüÁéáÈôêÂà∂Ôºà‰ªÖÂú®Áîü‰∫ßÁéØÂ¢ÉÂêØÁî®Ôºâ
      if (process.env.NODE_ENV === 'production') {
        this.app.use(globalRateLimit);
      }
      
      // üìè ËØ∑Ê±ÇÂ§ßÂ∞èÈôêÂà∂
      this.app.use(requestSizeLimit);
      
      // üìù ËØ∑Ê±ÇÊó•ÂøóÔºà‰ΩøÁî®Ëá™ÂÆö‰πâloggerËÄå‰∏çÊòØmorganÔºâ
      this.app.use(requestLogger);
      
      // üîß Âü∫Á°Ä‰∏≠Èó¥‰ª∂
      this.app.use(express.json({ 
        limit: '10mb',
        verify: (req, res, buf, encoding) => {
          // È™åËØÅJSONÊ†ºÂºè
          if (buf && buf.length && !buf.toString(encoding || 'utf8').trim()) {
            throw new Error('Invalid JSON: empty body');
          }
        }
      }));
      this.app.use(express.urlencoded({ extended: true, limit: '10mb' }));
      this.app.use(securityMiddleware);
      
      // üéØ ‰ø°‰ªª‰ª£ÁêÜ
      if (config.server.trustProxy) {
        this.app.set('trust proxy', 1);
      }

      // üé® Êñ∞ÁâàÁÆ°ÁêÜÁïåÈù¢ÈùôÊÄÅÊñá‰ª∂ÊúçÂä°ÔºàÂøÖÈ°ªÂú®ÂÖ∂‰ªñË∑ØÁî±‰πãÂâçÔºâ
      const adminSpaPath = path.join(__dirname, '..', 'web', 'admin-spa', 'dist');
      if (fs.existsSync(adminSpaPath)) {
        // Â§ÑÁêÜ‰∏çÂ∏¶ÊñúÊù†ÁöÑË∑ØÂæÑÔºåÈáçÂÆöÂêëÂà∞Â∏¶ÊñúÊù†ÁöÑË∑ØÂæÑ
        this.app.get('/admin-next', (req, res) => {
          res.redirect(301, '/admin-next/');
        });
        
        // ÂÆâÂÖ®ÁöÑÈùôÊÄÅÊñá‰ª∂ÊúçÂä°ÈÖçÁΩÆ
        this.app.use('/admin-next/', express.static(adminSpaPath, {
          maxAge: '1d', // ÁºìÂ≠òÈùôÊÄÅËµÑÊ∫ê1Â§©
          etag: true,
          lastModified: true,
          index: 'index.html',
          // ÂÆâÂÖ®ÈÄâÈ°πÔºöÁ¶ÅÊ≠¢ÁõÆÂΩïÈÅçÂéÜ
          dotfiles: 'deny', // ÊãíÁªùËÆøÈóÆÁÇπÊñá‰ª∂
          redirect: false, // Á¶ÅÊ≠¢ÁõÆÂΩïÈáçÂÆöÂêë
          // Ëá™ÂÆö‰πâÈîôËØØÂ§ÑÁêÜ
          setHeaders: (res, path) => {
            // ‰∏∫‰∏çÂêåÁ±ªÂûãÁöÑÊñá‰ª∂ËÆæÁΩÆÈÄÇÂΩìÁöÑÁºìÂ≠òÁ≠ñÁï•
            if (path.endsWith('.js') || path.endsWith('.css')) {
              res.setHeader('Cache-Control', 'public, max-age=31536000, immutable'); // 1Âπ¥ÁºìÂ≠ò
            } else if (path.endsWith('.html')) {
              res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
            }
          }
        }));
        
        // Â§ÑÁêÜSPAË∑ØÁî±ÔºöÊâÄÊúâÊú™ÂåπÈÖçÁöÑadmin-nextË∑ØÂæÑÈÉΩËøîÂõûindex.html
        this.app.get('/admin-next/*', (req, res, next) => {
          // ÂÆâÂÖ®Ê£ÄÊü•ÔºöÈò≤Ê≠¢Ë∑ØÂæÑÈÅçÂéÜÊîªÂáª
          const requestPath = req.path.replace('/admin-next/', '');
          if (requestPath.includes('..') || requestPath.includes('//') || requestPath.includes('\\')) {
            return res.status(400).json({ error: 'Invalid path' });
          }
          
          // Â¶ÇÊûúÊòØÈùôÊÄÅËµÑÊ∫êËØ∑Ê±Ç‰ΩÜÊñá‰ª∂‰∏çÂ≠òÂú®ÔºåËøîÂõû404
          if (requestPath.match(/\.(js|css|png|jpg|jpeg|gif|svg|ico|woff|woff2|ttf)$/i)) {
            return res.status(404).send('Not found');
          }
          
          // ÂÖ∂‰ªñË∑ØÂæÑËøîÂõûindex.htmlÔºàSPAË∑ØÁî±Â§ÑÁêÜÔºâ
          res.sendFile(path.join(adminSpaPath, 'index.html'));
        });
        
        logger.info('‚úÖ Admin SPA (next) static files mounted at /admin-next/');
      } else {
        logger.warn('‚ö†Ô∏è Admin SPA dist directory not found, skipping /admin-next route');
      }

      // üõ£Ô∏è Ë∑ØÁî±
      this.app.use('/api', apiRoutes);
      this.app.use('/claude', apiRoutes); // /claude Ë∑ØÁî±Âà´ÂêçÔºå‰∏é /api ÂäüËÉΩÁõ∏Âêå
      this.app.use('/admin', adminRoutes);
      // ‰ΩøÁî® web Ë∑ØÁî±ÔºàÂåÖÂê´ auth ÂíåÈ°µÈù¢ÈáçÂÆöÂêëÔºâ
      this.app.use('/web', webRoutes);
      this.app.use('/apiStats', apiStatsRoutes);
      this.app.use('/gemini', geminiRoutes);
      this.app.use('/openai/gemini', openaiGeminiRoutes);
      this.app.use('/openai/claude', openaiClaudeRoutes);
      
      // üè† Ê†πË∑ØÂæÑÈáçÂÆöÂêëÂà∞Êñ∞ÁâàÁÆ°ÁêÜÁïåÈù¢
      this.app.get('/', (req, res) => {
        res.redirect('/admin-next/api-stats');
      });
      
      // üè• Â¢ûÂº∫ÁöÑÂÅ•Â∫∑Ê£ÄÊü•Á´ØÁÇπ
      this.app.get('/health', async (req, res) => {
        try {
          const timer = logger.timer('health-check');
          
          // Ê£ÄÊü•ÂêÑ‰∏™ÁªÑ‰ª∂ÂÅ•Â∫∑Áä∂ÊÄÅ
          const [redisHealth, loggerHealth] = await Promise.all([
            this.checkRedisHealth(),
            this.checkLoggerHealth()
          ]);
          
          const memory = process.memoryUsage();
          
          // Ëé∑ÂèñÁâàÊú¨Âè∑Ôºö‰ºòÂÖà‰ΩøÁî®ÁéØÂ¢ÉÂèòÈáèÔºåÂÖ∂Ê¨°VERSIONÊñá‰ª∂ÔºåÂÜçÊ¨°package.jsonÔºåÊúÄÂêé‰ΩøÁî®ÈªòËÆ§ÂÄº
          let version = process.env.APP_VERSION || process.env.VERSION;
          if (!version) {
            try {
              // Â∞ùËØï‰ªéVERSIONÊñá‰ª∂ËØªÂèñ
              const fs = require('fs');
              const path = require('path');
              const versionFile = path.join(__dirname, '..', 'VERSION');
              if (fs.existsSync(versionFile)) {
                version = fs.readFileSync(versionFile, 'utf8').trim();
              }
            } catch (error) {
              // ÂøΩÁï•ÈîôËØØÔºåÁªßÁª≠Â∞ùËØïÂÖ∂‰ªñÊñπÂºè
            }
          }
          if (!version) {
            try {
              const packageJson = require('../package.json');
              version = packageJson.version;
            } catch (error) {
              version = '1.0.0';
            }
          }
          
          const health = {
            status: 'healthy',
            service: 'claude-relay-service',
            version: version,
            timestamp: new Date().toISOString(),
            uptime: process.uptime(),
            memory: {
              used: Math.round(memory.heapUsed / 1024 / 1024) + 'MB',
              total: Math.round(memory.heapTotal / 1024 / 1024) + 'MB',
              external: Math.round(memory.external / 1024 / 1024) + 'MB'
            },
            components: {
              redis: redisHealth,
              logger: loggerHealth
            },
            stats: logger.getStats()
          };
          
          timer.end('completed');
          res.json(health);
        } catch (error) {
          logger.error('‚ùå Health check failed:', { error: error.message, stack: error.stack });
          res.status(503).json({
            status: 'unhealthy',
            error: error.message,
            timestamp: new Date().toISOString()
          });
        }
      });
      
      // üìä ÊåáÊ†áÁ´ØÁÇπ
      this.app.get('/metrics', async (req, res) => {
        try {
          const stats = await redis.getSystemStats();
          const metrics = {
            ...stats,
            uptime: process.uptime(),
            memory: process.memoryUsage(),
            timestamp: new Date().toISOString()
          };
          
          res.json(metrics);
        } catch (error) {
          logger.error('‚ùå Metrics collection failed:', error);
          res.status(500).json({ error: 'Failed to collect metrics' });
        }
      });
      
      // üö´ 404 Â§ÑÁêÜ
      this.app.use('*', (req, res) => {
        res.status(404).json({
          error: 'Not Found',
          message: `Route ${req.originalUrl} not found`,
          timestamp: new Date().toISOString()
        });
      });
      
      // üö® ÈîôËØØÂ§ÑÁêÜ
      this.app.use(errorHandler);
      
      logger.success('‚úÖ Application initialized successfully');
      
    } catch (error) {
      logger.error('üí• Application initialization failed:', error);
      throw error;
    }
  }

  // üîß ÂàùÂßãÂåñÁÆ°ÁêÜÂëòÂá≠ÊçÆÔºàÊÄªÊòØ‰ªé init.json Âä†ËΩΩÔºåÁ°Æ‰øùÊï∞ÊçÆ‰∏ÄËá¥ÊÄßÔºâ
  async initializeAdmin() {
    try {
      const initFilePath = path.join(__dirname, '..', 'data', 'init.json');
      
      if (!fs.existsSync(initFilePath)) {
        logger.warn('‚ö†Ô∏è No admin credentials found. Please run npm run setup first.');
        return;
      }

      // ‰ªé init.json ËØªÂèñÁÆ°ÁêÜÂëòÂá≠ÊçÆÔºà‰Ωú‰∏∫ÂîØ‰∏ÄÁúüÂÆûÊï∞ÊçÆÊ∫êÔºâ
      const initData = JSON.parse(fs.readFileSync(initFilePath, 'utf8'));
      
      // Â∞ÜÊòéÊñáÂØÜÁ†ÅÂìàÂ∏åÂåñ
      const saltRounds = 10;
      const passwordHash = await bcrypt.hash(initData.adminPassword, saltRounds);
      
      // Â≠òÂÇ®Âà∞RedisÔºàÊØèÊ¨°ÂêØÂä®ÈÉΩË¶ÜÁõñÔºåÁ°Æ‰øù‰∏é init.json ÂêåÊ≠•Ôºâ
      const adminCredentials = {
        username: initData.adminUsername,
        passwordHash: passwordHash,
        createdAt: initData.initializedAt || new Date().toISOString(),
        lastLogin: null,
        updatedAt: initData.updatedAt || null
      };
      
      await redis.setSession('admin_credentials', adminCredentials);
      
      logger.success('‚úÖ Admin credentials loaded from init.json (single source of truth)');
      logger.info(`üìã Admin username: ${adminCredentials.username}`);
      
    } catch (error) {
      logger.error('‚ùå Failed to initialize admin credentials:', { error: error.message, stack: error.stack });
      throw error;
    }
  }

  // üîç RedisÂÅ•Â∫∑Ê£ÄÊü•
  async checkRedisHealth() {
    try {
      const start = Date.now();
      await redis.getClient().ping();
      const latency = Date.now() - start;
      
      return {
        status: 'healthy',
        connected: redis.isConnected,
        latency: `${latency}ms`
      };
    } catch (error) {
      return {
        status: 'unhealthy',
        connected: false,
        error: error.message
      };
    }
  }

  // üìù LoggerÂÅ•Â∫∑Ê£ÄÊü•
  async checkLoggerHealth() {
    try {
      const health = logger.healthCheck();
      return {
        status: health.healthy ? 'healthy' : 'unhealthy',
        ...health
      };
    } catch (error) {
      return {
        status: 'unhealthy',
        error: error.message
      };
    }
  }

  async start() {
    try {
      await this.initialize();
      
      this.server = this.app.listen(config.server.port, config.server.host, () => {
        logger.start(`üöÄ Claude Relay Service started on ${config.server.host}:${config.server.port}`);
        logger.info(`üåê Web interface: http://${config.server.host}:${config.server.port}/admin-next/api-stats`);
        logger.info(`üîó API endpoint: http://${config.server.host}:${config.server.port}/api/v1/messages`);
        logger.info(`‚öôÔ∏è  Admin API: http://${config.server.host}:${config.server.port}/admin`);
        logger.info(`üè• Health check: http://${config.server.host}:${config.server.port}/health`);
        logger.info(`üìä Metrics: http://${config.server.host}:${config.server.port}/metrics`);
      });

      const serverTimeout = 600000; // ÈªòËÆ§10ÂàÜÈíü
      this.server.timeout = serverTimeout;
      this.server.keepAliveTimeout = serverTimeout + 5000; // keepAlive Á®çÈïø‰∏ÄÁÇπ
      logger.info(`‚è±Ô∏è  Server timeout set to ${serverTimeout}ms (${serverTimeout/1000}s)`);
      

      // üîÑ ÂÆöÊúüÊ∏ÖÁêÜ‰ªªÂä°
      this.startCleanupTasks();
      
      // üõë ‰ºòÈõÖÂÖ≥Èó≠
      this.setupGracefulShutdown();
      
    } catch (error) {
      logger.error('üí• Failed to start server:', error);
      process.exit(1);
    }
  }

  startCleanupTasks() {
    // üßπ ÊØèÂ∞èÊó∂Ê∏ÖÁêÜ‰∏ÄÊ¨°ËøáÊúüÊï∞ÊçÆ
    setInterval(async () => {
      try {
        logger.info('üßπ Starting scheduled cleanup...');
        
        const apiKeyService = require('./services/apiKeyService');
        const claudeAccountService = require('./services/claudeAccountService');
        
        const [expiredKeys, errorAccounts] = await Promise.all([
          apiKeyService.cleanupExpiredKeys(),
          claudeAccountService.cleanupErrorAccounts()
        ]);
        
        await redis.cleanup();
        
        logger.success(`üßπ Cleanup completed: ${expiredKeys} expired keys, ${errorAccounts} error accounts reset`);
      } catch (error) {
        logger.error('‚ùå Cleanup task failed:', error);
      }
    }, config.system.cleanupInterval);

    logger.info(`üîÑ Cleanup tasks scheduled every ${config.system.cleanupInterval / 1000 / 60} minutes`);
  }

  setupGracefulShutdown() {
    const shutdown = async (signal) => {
      logger.info(`üõë Received ${signal}, starting graceful shutdown...`);
      
      if (this.server) {
        this.server.close(async () => {
          logger.info('üö™ HTTP server closed');
          
          try {
            await redis.disconnect();
            logger.info('üëã Redis disconnected');
          } catch (error) {
            logger.error('‚ùå Error disconnecting Redis:', error);
          }
          
          logger.success('‚úÖ Graceful shutdown completed');
          process.exit(0);
        });

        // Âº∫Âà∂ÂÖ≥Èó≠Ë∂ÖÊó∂
        setTimeout(() => {
          logger.warn('‚ö†Ô∏è Forced shutdown due to timeout');
          process.exit(1);
        }, 10000);
      } else {
        process.exit(0);
      }
    };

    process.on('SIGTERM', () => shutdown('SIGTERM'));
    process.on('SIGINT', () => shutdown('SIGINT'));
    
    // Â§ÑÁêÜÊú™ÊçïËé∑ÂºÇÂ∏∏
    process.on('uncaughtException', (error) => {
      logger.error('üí• Uncaught exception:', error);
      shutdown('uncaughtException');
    });
    
    process.on('unhandledRejection', (reason, promise) => {
      logger.error('üí• Unhandled rejection at:', promise, 'reason:', reason);
      shutdown('unhandledRejection');
    });
  }
}

// ÂêØÂä®Â∫îÁî®
if (require.main === module) {
  const app = new Application();
  app.start().catch((error) => {
    logger.error('üí• Application startup failed:', error);
    process.exit(1);
  });
}

module.exports = Application;